window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "examples", "modulename": "examples", "kind": "module", "doc": "<p>Minimal examples demonstrating how to use ALTK.</p>\n\n<p>See <code>examples.signaling_game</code>.</p>\n"}, {"fullname": "examples.signaling_game", "modulename": "examples.signaling_game", "kind": "module", "doc": "<p>Example demonstrating how to extend the objects and tools in the <code>altk.language</code> and <code>altk.effcomm</code> modules to a specific use case.</p>\n\n<p>This example implements a dynamic Lewis-Skyrms 'atomic' signaling game. Two players, Sender and Receiver learn to coordinate on a shared language via rudimentary reinforcement learning. The evolution of meaning conventions is interesting from the efficient communication perspective because we can track the trajectory of the informativity and the cognitive cost of the players' languages.</p>\n\n<p>The <code>languages</code> file implements an extension of the fundamental ALTK language, expression, and meaning abstractions into the signaling game use case.</p>\n\n<p>The <code>agents</code> file shows how to extend the basic <code>altk.effcomm.agent</code> objects to a dynamic learning agents.</p>\n\n<p>The driver script <code>main</code> invokes these implementations and runs the simulation of the learning dynamics on the signaling game. These details are implemented in the <code>learning</code> and <code>game</code> files, respectively.</p>\n\n<p>See the <a href=\"https://github.com/CLMBRs/altk/tree/main/src/examples/signaling_game#readme\">README</a> for more information.</p>\n"}, {"fullname": "examples.signaling_game.agents", "modulename": "examples.signaling_game.agents", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "examples.signaling_game.agents.Sender", "modulename": "examples.signaling_game.agents", "qualname": "Sender", "kind": "class", "doc": "<p>A Sender agent in a signaling game chooses a signal given an observed state of nature, according to P(signal | state).</p>\n", "bases": "altk.effcomm.agent.Speaker"}, {"fullname": "examples.signaling_game.agents.Sender.__init__", "modulename": "examples.signaling_game.agents", "qualname": "Sender.__init__", "kind": "function", "doc": "<p>An agent that uses a language to communicate, e.g. a RSA pragmatic agent or a Lewis-Skyrms signaler.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>language:</strong>  a language to construct a agent to define the relation between meanings and expressions, which can be used to initialize the agent matrices (e.g. <code>S</code> or <code>R</code>).</li>\n<li><strong>name:</strong>  an optional string to name the communicative agent</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">language</span><span class=\"p\">:</span> <span class=\"n\">examples</span><span class=\"o\">.</span><span class=\"n\">signaling_game</span><span class=\"o\">.</span><span class=\"n\">languages</span><span class=\"o\">.</span><span class=\"n\">SignalingLanguage</span>,</span><span class=\"param\">\t<span class=\"n\">weights</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "examples.signaling_game.agents.Sender.encode", "modulename": "examples.signaling_game.agents", "qualname": "Sender.encode", "kind": "function", "doc": "<p>Choose a signal given the state of nature observed, e.g. encode a discrete input as a discrete symbol.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">state</span><span class=\"p\">:</span> <span class=\"n\">altk</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">semantics</span><span class=\"o\">.</span><span class=\"n\">Meaning</span></span><span class=\"return-annotation\">) -> <span class=\"n\">examples</span><span class=\"o\">.</span><span class=\"n\">signaling_game</span><span class=\"o\">.</span><span class=\"n\">languages</span><span class=\"o\">.</span><span class=\"n\">Signal</span>:</span></span>", "funcdef": "def"}, {"fullname": "examples.signaling_game.agents.Sender.policy_to_indices", "modulename": "examples.signaling_game.agents", "qualname": "Sender.policy_to_indices", "kind": "function", "doc": "<p>Map a state -> signal policy to <code>(referent, expression)</code> indices.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">policy</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "examples.signaling_game.agents.Receiver", "modulename": "examples.signaling_game.agents", "qualname": "Receiver", "kind": "class", "doc": "<p>A Receiver agent in a signaling game chooses an action=state given a signal they received, according to P(state | signal).</p>\n", "bases": "altk.effcomm.agent.Listener"}, {"fullname": "examples.signaling_game.agents.Receiver.__init__", "modulename": "examples.signaling_game.agents", "qualname": "Receiver.__init__", "kind": "function", "doc": "<p>An agent that uses a language to communicate, e.g. a RSA pragmatic agent or a Lewis-Skyrms signaler.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>language:</strong>  a language to construct a agent to define the relation between meanings and expressions, which can be used to initialize the agent matrices (e.g. <code>S</code> or <code>R</code>).</li>\n<li><strong>name:</strong>  an optional string to name the communicative agent</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">language</span><span class=\"p\">:</span> <span class=\"n\">examples</span><span class=\"o\">.</span><span class=\"n\">signaling_game</span><span class=\"o\">.</span><span class=\"n\">languages</span><span class=\"o\">.</span><span class=\"n\">SignalingLanguage</span>,</span><span class=\"param\">\t<span class=\"n\">weights</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "examples.signaling_game.agents.Receiver.decode", "modulename": "examples.signaling_game.agents", "qualname": "Receiver.decode", "kind": "function", "doc": "<p>Choose an action given the signal received, e.g. decode a target state given its discrete encoding.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">signal</span><span class=\"p\">:</span> <span class=\"n\">examples</span><span class=\"o\">.</span><span class=\"n\">signaling_game</span><span class=\"o\">.</span><span class=\"n\">languages</span><span class=\"o\">.</span><span class=\"n\">Signal</span></span><span class=\"return-annotation\">) -> <span class=\"n\">examples</span><span class=\"o\">.</span><span class=\"n\">signaling_game</span><span class=\"o\">.</span><span class=\"n\">languages</span><span class=\"o\">.</span><span class=\"n\">SignalMeaning</span>:</span></span>", "funcdef": "def"}, {"fullname": "examples.signaling_game.agents.Receiver.policy_to_indices", "modulename": "examples.signaling_game.agents", "qualname": "Receiver.policy_to_indices", "kind": "function", "doc": "<p>Map a signal -> state policy to <code>(expression, referent)</code> indices.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">policy</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "examples.signaling_game.game", "modulename": "examples.signaling_game.game", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "examples.signaling_game.game.SignalingGame", "modulename": "examples.signaling_game.game", "qualname": "SignalingGame", "kind": "class", "doc": "<p>A signaling game is a tuple $(S, M, A, \\sigma, \nho, u, P)$ of states, messages, acts, a sender, a receiver, a utility function, and a distribution over states. The sender and receiver have a common payoff, given by a communicative success function.</p>\n\n<p>In this signaling game, we identify the acts with the states. For more detail on the communicative success function, see altk.effcomm.informativity.communicative_success.</p>\n"}, {"fullname": "examples.signaling_game.game.SignalingGame.__init__", "modulename": "examples.signaling_game.game", "qualname": "SignalingGame.__init__", "kind": "function", "doc": "<p>Initialize a signaling game.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>states:</strong>  the list of states of 'nature' that function as both input to the sender, and output of the receiver</li>\n<li><strong>signals:</strong>  the objects (which inherit from Expression) produced by the sender, and are input to receiver</li>\n<li><strong>sender:</strong>  a distribution over signals, given states</li>\n<li><strong>receiver:</strong>  a distribution over states, given signals</li>\n<li><strong>utility:</strong>  a measure of the pairwise utility of sender inputs and receiver outputs, typically the indicator function.</li>\n<li><strong>prior:</strong>  an array specifying the probability distribution over states, which can represent the objective frequency of certain states in nature, or the prior belief about them.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">states</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">examples</span><span class=\"o\">.</span><span class=\"n\">signaling_game</span><span class=\"o\">.</span><span class=\"n\">languages</span><span class=\"o\">.</span><span class=\"n\">State</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">signals</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">examples</span><span class=\"o\">.</span><span class=\"n\">signaling_game</span><span class=\"o\">.</span><span class=\"n\">languages</span><span class=\"o\">.</span><span class=\"n\">Signal</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">sender</span><span class=\"p\">:</span> <span class=\"n\">examples</span><span class=\"o\">.</span><span class=\"n\">signaling_game</span><span class=\"o\">.</span><span class=\"n\">agents</span><span class=\"o\">.</span><span class=\"n\">Sender</span>,</span><span class=\"param\">\t<span class=\"n\">receiver</span><span class=\"p\">:</span> <span class=\"n\">examples</span><span class=\"o\">.</span><span class=\"n\">signaling_game</span><span class=\"o\">.</span><span class=\"n\">agents</span><span class=\"o\">.</span><span class=\"n\">Receiver</span>,</span><span class=\"param\">\t<span class=\"n\">utility</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">examples</span><span class=\"o\">.</span><span class=\"n\">signaling_game</span><span class=\"o\">.</span><span class=\"n\">languages</span><span class=\"o\">.</span><span class=\"n\">State</span><span class=\"p\">,</span> <span class=\"n\">examples</span><span class=\"o\">.</span><span class=\"n\">signaling_game</span><span class=\"o\">.</span><span class=\"n\">languages</span><span class=\"o\">.</span><span class=\"n\">State</span><span class=\"p\">],</span> <span class=\"nb\">int</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">prior</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span>)</span>"}, {"fullname": "examples.signaling_game.game.indicator", "modulename": "examples.signaling_game.game", "qualname": "indicator", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"nb\">input</span><span class=\"p\">:</span> <span class=\"n\">examples</span><span class=\"o\">.</span><span class=\"n\">signaling_game</span><span class=\"o\">.</span><span class=\"n\">languages</span><span class=\"o\">.</span><span class=\"n\">State</span>,</span><span class=\"param\">\t<span class=\"n\">output</span><span class=\"p\">:</span> <span class=\"n\">examples</span><span class=\"o\">.</span><span class=\"n\">signaling_game</span><span class=\"o\">.</span><span class=\"n\">languages</span><span class=\"o\">.</span><span class=\"n\">State</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "examples.signaling_game.game.distribution_over_states", "modulename": "examples.signaling_game.game", "qualname": "distribution_over_states", "kind": "function", "doc": "<p>Generate a prior probability distribution over states.</p>\n\n<p>Varying the entropy of the prior over states models the relative communicative 'need' of states. A natural interpretation is also that these needs reflect objective environmental or cultural pressures that cause certain objects to become more frequent-- and so more useful-- for communication.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>num_states:</strong>  the size of the distribution</li>\n<li><strong>type:</strong>  {'deterministic', 'random'} a str representing whether to generate a uniform prior or randomly sample one from a Dirichlet distribution.</li>\n<li><strong>alpha:</strong>  parameter of the Dirichlet distribution to sample from, of shape <code>(num_states)</code>. Each element must be greater than or equal to 0. By default set to all ones. Varying this parameter varies the entropy of the prior over states.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>sample: np.ndarray of shape <code>(num_states)</code></p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">num_states</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"nb\">type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;deterministic&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">alpha</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "examples.signaling_game.languages", "modulename": "examples.signaling_game.languages", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "examples.signaling_game.languages.State", "modulename": "examples.signaling_game.languages", "qualname": "State", "kind": "class", "doc": "<p>In a simple Lewis-Skyrms signaling game, a state represents the observed input to a Sender and the chosen action of a Receiver; in both cases the state can be naturally interpreted as a meaning. Then the signaling game is about Receiver guessing Sender's intended meanings.</p>\n", "bases": "altk.language.semantics.Referent"}, {"fullname": "examples.signaling_game.languages.State.__init__", "modulename": "examples.signaling_game.languages", "qualname": "State.__init__", "kind": "function", "doc": "<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name:</strong>  a str representing a single state in the universe.</li>\n<li><strong>weight:</strong>  a float that can represent the importance of the state. This quantity can be identified with the prior probability of a state. It can also be used (normalized) to determine the meaning of a signal as a probability distribution over states.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">weight</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "examples.signaling_game.languages.StateSpace", "modulename": "examples.signaling_game.languages", "qualname": "StateSpace", "kind": "class", "doc": "<p>The StateSpace represents the agents' environment.</p>\n", "bases": "altk.language.semantics.Universe"}, {"fullname": "examples.signaling_game.languages.StateSpace.__init__", "modulename": "examples.signaling_game.languages", "qualname": "StateSpace.__init__", "kind": "function", "doc": "<p>Construct a universe shared by all agents in a signaling game.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>states:</strong>  the list of _all_ states that can be referred to.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">states</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">examples</span><span class=\"o\">.</span><span class=\"n\">signaling_game</span><span class=\"o\">.</span><span class=\"n\">languages</span><span class=\"o\">.</span><span class=\"n\">State</span><span class=\"p\">]</span></span>)</span>"}, {"fullname": "examples.signaling_game.languages.SignalMeaning", "modulename": "examples.signaling_game.languages", "qualname": "SignalMeaning", "kind": "class", "doc": "<p>A meaning picks out objects of the universe.</p>\n\n<p>There are several easy ways of modeling this.</p>\n\n<p>On one familiar model from (e.g. predicate logic and formal semantics) a semantic value can be set, called a property: the set of objects of the universe satisfying that property. A meaning can be associated with the relevant subset of the universe, or its characteristic function.</p>\n\n<p>On some efficient communication analysis models, we use the concept of meaning to be a more general mapping of forms to objects of reference.</p>\n\n<p>A meaning is always a subset of the universe, because an expression may itself be underspecified: that is, the expression can be used to express different meanings. Sometimes these different literal meanings are not equally likely, in which it can be helpful to define a meaning explicitly as a distribution.</p>\n", "bases": "altk.language.semantics.Meaning"}, {"fullname": "examples.signaling_game.languages.SignalMeaning.__init__", "modulename": "examples.signaling_game.languages", "qualname": "SignalMeaning.__init__", "kind": "function", "doc": "<p>Construct the meaning of a signal as the set of states it can refer to.</p>\n\n<p>In altk, Meanings can be generalized from a set of referents to distributions over those referents. by default, we let be a peaked distribution over a single point, where one state has probability 1.0, and all others 0.0.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>states:</strong>  the list of atomic states that a signal can be used to communicate.</li>\n<li><strong>universe:</strong>  the semantic space that the signal meaning is a subset of.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">states</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">examples</span><span class=\"o\">.</span><span class=\"n\">signaling_game</span><span class=\"o\">.</span><span class=\"n\">languages</span><span class=\"o\">.</span><span class=\"n\">State</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">universe</span><span class=\"p\">:</span> <span class=\"n\">examples</span><span class=\"o\">.</span><span class=\"n\">signaling_game</span><span class=\"o\">.</span><span class=\"n\">languages</span><span class=\"o\">.</span><span class=\"n\">StateSpace</span></span>)</span>"}, {"fullname": "examples.signaling_game.languages.SignalMeaning.yaml_rep", "modulename": "examples.signaling_game.languages", "qualname": "SignalMeaning.yaml_rep", "kind": "function", "doc": "<p>Convert to a dictionary representation of the meaning for compact saving to .yml files.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "examples.signaling_game.languages.Signal", "modulename": "examples.signaling_game.languages", "qualname": "Signal", "kind": "class", "doc": "<p>In the simple atomic signaling game, a signal is a single discrete symbol encoding one or more states.</p>\n\n<p>One of the senses in which the signaling game is 'atomic' is that the signals are atomic -- they do not encode any special structure (e.g. features such as size, color, etc.). The only information they can encode about the states of nature are their identity.</p>\n", "bases": "altk.language.language.Expression"}, {"fullname": "examples.signaling_game.languages.Signal.__init__", "modulename": "examples.signaling_game.languages", "qualname": "Signal.__init__", "kind": "function", "doc": "<p>A signal is characterized by its form and meaning.</p>\n\n<p>We treat signals as equal up to form, even they might communicate different meanings. Note the <code>__eq__</code> and <code>__hash__</code> implementations encode this choice.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>form:</strong>  a str representing the identity of the signal, e.g. the sound a Sender produces and a Receiver hears.</li>\n<li><strong>meaning:</strong>  a SignalMeaning representing the set of states the signal can be used to refer to. Default is None to reflect the idea that in signaling games, signals do not have a standing meaning until convention is achieved.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">form</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">meaning</span><span class=\"p\">:</span> <span class=\"n\">examples</span><span class=\"o\">.</span><span class=\"n\">signaling_game</span><span class=\"o\">.</span><span class=\"n\">languages</span><span class=\"o\">.</span><span class=\"n\">SignalMeaning</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "examples.signaling_game.languages.Signal.yaml_rep", "modulename": "examples.signaling_game.languages", "qualname": "Signal.yaml_rep", "kind": "function", "doc": "<p>Convert to a dictionary representation of the expression for compact saving to .yml files.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "examples.signaling_game.languages.SignalingLanguage", "modulename": "examples.signaling_game.languages", "qualname": "SignalingLanguage", "kind": "class", "doc": "<p>In the simple atomic signaling game, a language is a list of signals and their associated states.</p>\n", "bases": "altk.language.language.Language"}, {"fullname": "examples.signaling_game.languages.SignalingLanguage.__init__", "modulename": "examples.signaling_game.languages", "qualname": "SignalingLanguage.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">signals</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">examples</span><span class=\"o\">.</span><span class=\"n\">signaling_game</span><span class=\"o\">.</span><span class=\"n\">languages</span><span class=\"o\">.</span><span class=\"n\">Signal</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">&#39;complexity&#39;</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s1\">&#39;accuracy&#39;</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s1\">&#39;name&#39;</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">}</span></span>)</span>"}, {"fullname": "examples.signaling_game.languages.SignalingLanguage.yaml_rep", "modulename": "examples.signaling_game.languages", "qualname": "SignalingLanguage.yaml_rep", "kind": "function", "doc": "<p>Get a data structure for safe compact saving in a .yml file.</p>\n\n<p>A dict of the language name and its data. This data is itself a dict of a list of the expressions, and other data.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "examples.signaling_game.learning", "modulename": "examples.signaling_game.learning", "kind": "module", "doc": "<p>Simple Roth-Erev reinforcement learning dynamic for agents of a signaling game.</p>\n"}, {"fullname": "examples.signaling_game.learning.simulate_learning", "modulename": "examples.signaling_game.learning", "qualname": "simulate_learning", "kind": "function", "doc": "<p>Simulate Roth-Erev reinforcement learning in the signaling game.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>num_rounds:</strong>  the number of rounds to pay the signaling game.</li>\n<li><strong>reward_amount:</strong>  the amount to scale the utility function by, before rewarding agents with the result.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">g</span><span class=\"p\">:</span> <span class=\"n\">examples</span><span class=\"o\">.</span><span class=\"n\">signaling_game</span><span class=\"o\">.</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">SignalingGame</span>,</span><span class=\"param\">\t<span class=\"n\">num_rounds</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">learning_rate</span><span class=\"o\">=</span><span class=\"mf\">1.0</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "examples.signaling_game.learning.reward", "modulename": "examples.signaling_game.learning", "qualname": "reward", "kind": "function", "doc": "<p>Reward an agent for a particular referent-expression behavior.</p>\n\n<p>In a signaling game, the communicative success of Sender and Receiver language protocols evolve under simple reinforcement learning dynamics. The reward function increments an agent's weight matrix at the specified location by the specified amount.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>policy:</strong>  a dict of the form {\"referent\": referent, \"expression\": Expression}</li>\n<li><strong>amount:</strong>  a positive number reprsenting how much to reward the behavior</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">agent</span><span class=\"p\">:</span> <span class=\"n\">altk</span><span class=\"o\">.</span><span class=\"n\">effcomm</span><span class=\"o\">.</span><span class=\"n\">agent</span><span class=\"o\">.</span><span class=\"n\">CommunicativeAgent</span>,</span><span class=\"param\">\t<span class=\"n\">policy</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">amount</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "examples.signaling_game.main", "modulename": "examples.signaling_game.main", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "examples.signaling_game.main.main", "modulename": "examples.signaling_game.main", "qualname": "main", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "examples.signaling_game.util", "modulename": "examples.signaling_game.util", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "examples.signaling_game.util.set_seed", "modulename": "examples.signaling_game.util", "qualname": "set_seed", "kind": "function", "doc": "<p>Sets various random seeds.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">seed</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "examples.signaling_game.util.save_weights", "modulename": "examples.signaling_game.util", "qualname": "save_weights", "kind": "function", "doc": "<p>Save weights to a txt file.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">fn</span>, </span><span class=\"param\"><span class=\"n\">sender</span>, </span><span class=\"param\"><span class=\"n\">receiver</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "examples.signaling_game.util.save_languages", "modulename": "examples.signaling_game.util", "qualname": "save_languages", "kind": "function", "doc": "<p>Save a list of languages to a YAML file.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">fn</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">languages</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">examples</span><span class=\"o\">.</span><span class=\"n\">signaling_game</span><span class=\"o\">.</span><span class=\"n\">languages</span><span class=\"o\">.</span><span class=\"n\">SignalingLanguage</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "examples.signaling_game.util.save_plot", "modulename": "examples.signaling_game.util", "qualname": "save_plot", "kind": "function", "doc": "<p>Save a plot with some default settings.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">fn</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">plot</span><span class=\"p\">:</span> <span class=\"n\">plotnine</span><span class=\"o\">.</span><span class=\"n\">ggplot</span><span class=\"o\">.</span><span class=\"n\">ggplot</span>,</span><span class=\"param\">\t<span class=\"n\">width</span><span class=\"o\">=</span><span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">height</span><span class=\"o\">=</span><span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">dpi</span><span class=\"o\">=</span><span class=\"mi\">300</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "examples.signaling_game.util.get_args", "modulename": "examples.signaling_game.util", "qualname": "get_args", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"n\">argparse</span><span class=\"o\">.</span><span class=\"n\">Namespace</span>:</span></span>", "funcdef": "def"}, {"fullname": "examples.signaling_game.vis", "modulename": "examples.signaling_game.vis", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "examples.signaling_game.vis.plot_accuracy", "modulename": "examples.signaling_game.vis", "qualname": "plot_accuracy", "kind": "function", "doc": "<p>Construct and save a basic plotnine line plot of accuracy vs rounds.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">fn</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">accuracies</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "examples.signaling_game.vis.plot_complexity", "modulename": "examples.signaling_game.vis", "qualname": "plot_complexity", "kind": "function", "doc": "<p>Get a basic plotnine line plot of complexities vs rounds.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">fn</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">complexities</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">plotnine</span><span class=\"o\">.</span><span class=\"n\">ggplot</span><span class=\"o\">.</span><span class=\"n\">ggplot</span>:</span></span>", "funcdef": "def"}, {"fullname": "examples.signaling_game.vis.plot_tradeoff", "modulename": "examples.signaling_game.vis", "qualname": "plot_tradeoff", "kind": "function", "doc": "<p>Get a basic plotnine point plot of languages in a complexity vs comm_cost 2D plot.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">fn</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">complexities</span><span class=\"p\">:</span> <span class=\"nb\">list</span>, </span><span class=\"param\"><span class=\"n\">accuracies</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">) -> <span class=\"n\">plotnine</span><span class=\"o\">.</span><span class=\"n\">ggplot</span><span class=\"o\">.</span><span class=\"n\">ggplot</span>:</span></span>", "funcdef": "def"}, {"fullname": "examples.signaling_game.vis.plot_distribution", "modulename": "examples.signaling_game.vis", "qualname": "plot_distribution", "kind": "function", "doc": "<p>Create a bar plot of a distribution over states, e.g. the communicative need distribution or the ground truth distribution.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">fn</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">dist</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"n\">plotnine</span><span class=\"o\">.</span><span class=\"n\">ggplot</span><span class=\"o\">.</span><span class=\"n\">ggplot</span>:</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();